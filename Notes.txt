Android Notes:

Setup and Prerequisites - Installing Java JDK and Android Studio
Java Fundamentals - Essential concepts for Android development
Project Structure - Understanding key files and directories
UI Basics - Layouts and common UI components
Activities and Lifecycle - Core Android building blocks
Intents and Navigation - Moving between screens
Event Handling - Responding to user interactions
Data Storage - Various options for storing data
Lists and Adapters - Working with RecyclerView
Permissions - Handling Android's permission system
Threading - Managing background operations
Fragments - Modular UI components
Material Design - Modern Android UI guidelines
Networking - Making API calls
Next Steps - Advanced topics and learning resources

Each section includes concise explanations and code examples to help you understand the concepts.
1. Setup and Prerequisites
Required Software

Java Development Kit (JDK) - Android development requires JDK 8 or higher
Android Studio - Official IDE for Android development
Android SDK - Installed automatically with Android Studio

Installation Steps

Download and install JDK from Oracle's website
Download Android Studio from developer.android.com
During Android Studio setup, ensure Android SDK is installed
Install necessary SDK platforms and tools through the SDK Manager

2. Java Fundamentals for Android
Essential Java Concepts

Object-Oriented Programming - Classes, objects, inheritance, polymorphism
Variables and Data Types - Primitives vs reference types
Control Flow - if/else, switch, loops
Collections - ArrayList, HashMap, etc.
Exception Handling - try/catch blocks

Android-Specific Java

Anonymous Inner Classes - Used with listeners
Lambda Expressions - Simplifying callback interfaces
Interfaces - Used extensively in Android framework

3. Android Project Structure
Key Components

app/src/main/java/ - Java source code files
app/src/main/res/ - Resources (layouts, strings, images)
app/src/main/AndroidManifest.xml - App configuration
app/build.gradle - Build configuration and dependencies

Resource Types

layout/ - XML UI layouts
values/ - Strings, colors, styles, dimensions
drawable/ - Images and drawable resources
menu/ - Menu definitions

4. Android UI Basics
Layout Types

ConstraintLayout - Flexible positioning with constraints
LinearLayout - Arrange elements in a line
RelativeLayout - Position elements relative to each other
FrameLayout - Simple stack of views

UI Components

TextView - Display text
EditText - Input field
Button - Clickable button
ImageView - Display images
RecyclerView - Display scrollable lists

XML Layout Example
xml<ConstraintLayout>
    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!" />
    
    <Button
        android:id="@+id/button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Click Me" />
</ConstraintLayout>
5. Activities and Lifecycle
Activity Basics

Primary building block of Android apps
Represents a single screen with user interface
Defined in Java class extending Activity or AppCompatActivity

Activity Lifecycle Methods

onCreate() - Activity is being created (initialize UI)
onStart() - Activity becoming visible
onResume() - Activity interacting with user
onPause() - Activity partially obscured
onStop() - Activity no longer visible
onDestroy() - Activity being destroyed
onRestart() - Activity restarting after being stopped

Activity Example
javapublic class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        Button button = findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle button click
            }
        });
    }
}
6. Intents and Navigation
Intent Types

Explicit Intents - Target specific component (activity, service)
Implicit Intents - Describe action without specific target

Common Uses

Start a new activity
Launch a service
Deliver a broadcast
Open a web URL or email app

Intent Example
java// Explicit Intent
Intent intent = new Intent(MainActivity.this, SecondActivity.class);
intent.putExtra("key", "value"); // Optional data
startActivity(intent);

// Implicit Intent
Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://developer.android.com"));
startActivity(browserIntent);
7. Event Handling
UI Event Listeners

OnClickListener - Button clicks
OnLongClickListener - Long presses
OnTouchListener - Touch events
TextWatcher - EditText changes

Implementing Event Handlers
javaButton button = findViewById(R.id.button);
button.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        Toast.makeText(MainActivity.this, "Button clicked!", Toast.LENGTH_SHORT).show();
    }
});

// Lambda alternative (Java 8+)
button.setOnClickListener(v -> {
    Toast.makeText(MainActivity.this, "Button clicked!", Toast.LENGTH_SHORT).show();
});
8. Data Storage Options
Storage Methods

Shared Preferences - Key-value pairs for small data
SQLite Database - Structured data storage
Room Persistence Library - SQLite abstraction
File Storage - Internal/external file system
Cloud Storage - Firebase, custom servers

SharedPreferences Example
java// Save data
SharedPreferences prefs = getSharedPreferences("MyPrefs", MODE_PRIVATE);
SharedPreferences.Editor editor = prefs.edit();
editor.putString("username", "John");
editor.apply();

// Retrieve data
String username = prefs.getString("username", "");
9. Adapters and Lists
RecyclerView Implementation

Create layout for list item
Create RecyclerView.Adapter subclass
Create RecyclerView.ViewHolder subclass
Implement methods to bind data to views

RecyclerView Example
java// Adapter class
public class MyAdapter extends RecyclerView.Adapter<MyAdapter.ViewHolder> {
    private List<String> data;
    
    public static class ViewHolder extends RecyclerView.ViewHolder {
        public TextView textView;
        
        public ViewHolder(View v) {
            super(v);
            textView = v.findViewById(R.id.text_view);
        }
    }
    
    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_layout, parent, false);
        return new ViewHolder(v);
    }
    
    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        holder.textView.setText(data.get(position));
    }
    
    @Override
    public int getItemCount() {
        return data.size();
    }
}
10. Permissions and Security
Permission Types

Normal Permissions - Minimal risk, granted automatically
Dangerous Permissions - Privacy risks, require user approval
Special Permissions - Require manifest and special approval

Requesting Permissions (Android 6.0+)
java// Check permission
if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
        != PackageManager.PERMISSION_GRANTED) {
    // Request permission
    ActivityCompat.requestPermissions(this,
            new String[]{Manifest.permission.CAMERA},
            MY_PERMISSIONS_REQUEST_CAMERA);
}

// Handle result
@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions,
                                       int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if (requestCode == MY_PERMISSIONS_REQUEST_CAMERA) {
        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            // Permission granted
        } else {
            // Permission denied
        }
    }
}
11. AsyncTask and Threading
UI Thread Limitations

All UI operations must be on main thread
Network and database operations should be off main thread
Long operations on main thread cause ANR (Application Not Responding)

Threading Options

AsyncTask (deprecated but still common)
Handlers and Loopers
ExecutorService
Coroutines (with Kotlin)
RxJava

Simple AsyncTask Example
javaprivate class DownloadTask extends AsyncTask<String, Void, String> {
    @Override
    protected String doInBackground(String... urls) {
        // Perform background operation
        return result;
    }
    
    @Override
    protected void onPostExecute(String result) {
        // Update UI with result
    }
}

// Execute the task
new DownloadTask().execute("https://example.com/data");
12. Fragments
Fragment Basics

Modular sections of an activity's UI
Can be reused across activities
Have their own lifecycle

Fragment Lifecycle

Similar to activity lifecycle with additional methods
onAttach() - Fragment attached to activity
onCreateView() - Create and return view hierarchy
onViewCreated() - View created, setup UI components
onDestroyView() - View being destroyed

Fragment Example
javapublic class ExampleFragment extends Fragment {
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_example, container, false);
    }
    
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Button button = view.findViewById(R.id.button);
        button.setOnClickListener(v -> {
            // Handle click
        });
    }
}
13. Material Design
Material Components

MaterialButton - Enhanced buttons
TextInputLayout - Enhanced text fields
CardView - Card containers
BottomNavigationView - Bottom navigation
CoordinatorLayout - Coordinate UI behaviors

Adding Material Design

Add material design dependency to build.gradle
gradleimplementation 'com.google.android.material:material:1.5.0'

Use Material theme in styles.xml
xml<style name="AppTheme" parent="Theme.MaterialComponents.Light.DarkActionBar">
    <!-- Customize your theme here -->
</style>


14. Networking Basics
Popular Libraries

Retrofit - Type-safe HTTP client
OkHttp - HTTP client
Volley - Networking library

Retrofit Example
java// Define API interface
public interface ApiService {
    @GET("users/{user}")
    Call<User> getUser(@Path("user") String userId);
}

// Create retrofit instance
Retrofit retrofit = new Retrofit.Builder()
    .baseUrl("https://api.example.com/")
    .addConverterFactory(GsonConverterFactory.create())
    .build();

// Create service
ApiService service = retrofit.create(ApiService.class);

// Make request
Call<User> call = service.getUser("123");
call.enqueue(new Callback<User>() {
    @Override
    public void onResponse(Call<User> call, Response<User> response) {
        if (response.isSuccessful()) {
            User user = response.body();
            // Update UI
        }
    }
    
    @Override
    public void onFailure(Call<User> call, Throwable t) {
        // Handle error
    }
});
